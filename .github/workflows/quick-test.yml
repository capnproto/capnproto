# TODO(2.0): Support g++ once they fix coroutines. This also blocks MinGW and ManyLinux builds.

name: Quick Tests

on:
  pull_request:
    paths-ignore:
    - 'doc/**'
  push:
    branches:
    - master
    - v2
    - 'release-*'

env:
  # We used to install some more packages here (build-essential, git, zlib1g-dev, cmake, libssl-dev),
  # but those appear to already be present/not needed for either build.
  INSTALL_DEPS: |
    install_deps() {
      local clang=$1
      export DEBIAN_FRONTEND=noninteractive && sudo apt-get update && sudo apt-get install --no-upgrade --no-install-recommends -y clang-$clang libc++-$clang-dev libc++abi-$clang-dev
    }

jobs:
  Linux-musl:
    # Docker images are no longer cached on the 24.04 runner, use 22.04 instead
    runs-on: ubuntu-22.04
    # We depend on both clang and libc++. Alpine Linux 3.17 seems to be the first version to include
    # a libc++ package (based on LLVM 15), but building capnproto failed when I tried it.
    # Alpine Linux 3.18's libc++ package is from LLVM 16, however, and worked out-of-the-box, so
    # Clang 16 appears to be the earliest Clang version we can run easily on Alpine Linux.
    container: alpine:3.18.2
    steps:
      - uses: actions/checkout@v4
      - name: install dependencies
        run: apk add autoconf automake bash build-base cmake libtool libucontext-dev linux-headers openssl-dev clang16 libc++-dev
      - name: super-test
        run: ./super-test.sh quick clang-16
  Linux-clang:
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        clang: [14, 15, 16, 17, 18]
        driver: [bazel, super-test]
        include:
          - driver: bazel
            run-test: cd c++ && bazel test --verbose_failures --test_output=errors -k --cxxopt='-Werror' //...
          - driver: super-test
            run-test: ./super-test.sh quick
    steps:
      - uses: actions/checkout@v4
      - name: install dependencies
        run: eval "$INSTALL_DEPS" && install_deps ${{ matrix.clang }}
      - name: test
        run: |
            export CC=clang-${{ matrix.clang }}
            export CXX=clang++-${{ matrix.clang }}
            ${{ matrix.run-test }}
  Linux-clang-sanitizers:
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        clang: [18]
        config: [asan]
    steps:
      - uses: actions/checkout@v4
      - name: install dependencies
        run: eval "$INSTALL_DEPS" && install_deps ${{ matrix.clang }}
      - name: test
        run: |
            export CC=clang-${{ matrix.clang }}
            export CXX=clang++-${{ matrix.clang }}
            cd c++ && bazel test --verbose_failures --test_output=errors -k --config=${{ matrix.config }} //...
  MacOS:
    runs-on: macos-latest
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - name: install dependencies
        run: |
            brew install autoconf automake libtool pkg-config
      - name: super-test
        run: |
            ./super-test.sh quick
  MSVC:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ['windows-latest']
        include:
          - os: windows-latest
            target: 'Visual Studio 17 2022'
            arch: -A x64
    steps:
      - uses: actions/checkout@v4
      - name: Include $CONDA in $PATH
        run: |
          echo "$Env:CONDA\condabin" >> $env:GITHUB_PATH
      - name: Install dependencies via Conda
        run: |
          conda update -n base -c defaults -q conda
          conda install -n base -c defaults -q openssl zlib
      - name: Build and test
        shell: cmd
        run: |
            echo "Activate conda base environment"
            call activate base
            echo "Building Cap'n Proto with ${{ matrix.target }}"
            cmake -Hc++ -Bbuild-output ${{ matrix.arch }} -G "${{ matrix.target }}" -DCMAKE_BUILD_TYPE=debug -DCMAKE_PREFIX_PATH="%CONDA_PREFIX%" -DCMAKE_INSTALL_PREFIX=%CD%\capnproto-c++-install
            cmake --build build-output --config debug --target install

            echo "Building Cap'n Proto samples with ${{ matrix.target }}"
            cmake -Hc++/samples -Bbuild-output-samples ${{ matrix.arch }} -G "${{ matrix.target }}" -DCMAKE_BUILD_TYPE=debug -DCMAKE_PREFIX_PATH=%CD%\capnproto-c++-install
            cmake --build build-output-samples --config debug

            cd build-output\src
            ctest -V -C debug
