// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: rpc-twoparty.capnp

#include "rpc-twoparty.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<26> b_9fd69ebc87b9719c = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    156, 113, 185, 135, 188, 158, 214, 159,
     25,   0,   0,   0,   2,   0,   0,   0,
    161, 242, 218,  92, 136, 199, 132, 161,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 242,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  55,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 114, 112,
     99,  45, 116, 119, 111, 112,  97, 114,
    116, 121,  46,  99,  97, 112, 110, 112,
     58,  83, 105, 100, 101,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 101, 114, 118, 101, 114,   0,   0,
     99, 108, 105, 101, 110, 116,   0,   0, }
};
::capnp::word const* const bp_9fd69ebc87b9719c = b_9fd69ebc87b9719c.words;
#if !CAPNP_LITE
static const uint16_t m_9fd69ebc87b9719c[] = {1, 0};
const ::capnp::_::RawSchema s_9fd69ebc87b9719c = {
  0x9fd69ebc87b9719c, b_9fd69ebc87b9719c.words, 26, nullptr, m_9fd69ebc87b9719c,
  0, 2, nullptr, nullptr, nullptr, { &s_9fd69ebc87b9719c, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
CAPNP_DEFINE_ENUM(Side_9fd69ebc87b9719c, 9fd69ebc87b9719c);
static const ::capnp::_::AlignedData<33> b_d20b909fee733a8e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    142,  58, 115, 238, 159, 144,  11, 210,
     25,   0,   0,   0,   1,   0,   1,   0,
    161, 242, 218,  92, 136, 199, 132, 161,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 250,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 114, 112,
     99,  45, 116, 119, 111, 112,  97, 114,
    116, 121,  46,  99,  97, 112, 110, 112,
     58,  86,  97, 116,  73, 100,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    115, 105, 100, 101,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
    156, 113, 185, 135, 188, 158, 214, 159,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d20b909fee733a8e = b_d20b909fee733a8e.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d20b909fee733a8e[] = {
  &s_9fd69ebc87b9719c,
};
static const uint16_t m_d20b909fee733a8e[] = {0};
static const uint16_t i_d20b909fee733a8e[] = {0};
const ::capnp::_::RawSchema s_d20b909fee733a8e = {
  0xd20b909fee733a8e, b_d20b909fee733a8e.words, 33, d_d20b909fee733a8e, m_d20b909fee733a8e,
  1, 1, i_d20b909fee733a8e, nullptr, nullptr, { &s_d20b909fee733a8e, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_b88d09a9c5f39817 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     23, 152, 243, 197, 169,   9, 141, 184,
     25,   0,   0,   0,   1,   0,   1,   0,
    161, 242, 218,  92, 136, 199, 132, 161,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 114, 112,
     99,  45, 116, 119, 111, 112,  97, 114,
    116, 121,  46,  99,  97, 112, 110, 112,
     58,  80, 114, 111, 118, 105, 115, 105,
    111, 110,  73, 100,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    106, 111, 105, 110,  73, 100,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b88d09a9c5f39817 = b_b88d09a9c5f39817.words;
#if !CAPNP_LITE
static const uint16_t m_b88d09a9c5f39817[] = {0};
static const uint16_t i_b88d09a9c5f39817[] = {0};
const ::capnp::_::RawSchema s_b88d09a9c5f39817 = {
  0xb88d09a9c5f39817, b_b88d09a9c5f39817.words, 34, nullptr, m_b88d09a9c5f39817,
  0, 1, i_b88d09a9c5f39817, nullptr, nullptr, { &s_b88d09a9c5f39817, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_89f389b6fd4082c1 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    193, 130,  64, 253, 182, 137, 243, 137,
     25,   0,   0,   0,   1,   0,   0,   0,
    161, 242, 218,  92, 136, 199, 132, 161,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 114, 112,
     99,  45, 116, 119, 111, 112,  97, 114,
    116, 121,  46,  99,  97, 112, 110, 112,
     58,  82, 101,  99, 105, 112, 105, 101,
    110, 116,  73, 100,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_89f389b6fd4082c1 = b_89f389b6fd4082c1.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_89f389b6fd4082c1 = {
  0x89f389b6fd4082c1, b_89f389b6fd4082c1.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_89f389b6fd4082c1, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<19> b_b47f4979672cb59d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    157, 181,  44, 103, 121,  73, 127, 180,
     25,   0,   0,   0,   1,   0,   0,   0,
    161, 242, 218,  92, 136, 199, 132, 161,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 114, 112,
     99,  45, 116, 119, 111, 112,  97, 114,
    116, 121,  46,  99,  97, 112, 110, 112,
     58,  84, 104, 105, 114, 100,  80,  97,
    114, 116, 121,  67,  97, 112,  73, 100,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_b47f4979672cb59d = b_b47f4979672cb59d.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_b47f4979672cb59d = {
  0xb47f4979672cb59d, b_b47f4979672cb59d.words, 19, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_b47f4979672cb59d, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<65> b_95b29059097fca83 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    131, 202, 127,   9,  89, 144, 178, 149,
     25,   0,   0,   0,   1,   0,   1,   0,
    161, 242, 218,  92, 136, 199, 132, 161,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 114, 112,
     99,  45, 116, 119, 111, 112,  97, 114,
    116, 121,  46,  99,  97, 112, 110, 112,
     58,  74, 111, 105, 110,  75, 101, 121,
     80,  97, 114, 116,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     72,   0,   0,   0,   3,   0,   1,   0,
     84,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     81,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     76,   0,   0,   0,   3,   0,   1,   0,
     88,   0,   0,   0,   2,   0,   1,   0,
    106, 111, 105, 110,  73, 100,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97, 114, 116,  67, 111, 117, 110,
    116,   0,   0,   0,   0,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97, 114, 116,  78, 117, 109,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_95b29059097fca83 = b_95b29059097fca83.words;
#if !CAPNP_LITE
static const uint16_t m_95b29059097fca83[] = {0, 1, 2};
static const uint16_t i_95b29059097fca83[] = {0, 1, 2};
const ::capnp::_::RawSchema s_95b29059097fca83 = {
  0x95b29059097fca83, b_95b29059097fca83.words, 65, nullptr, m_95b29059097fca83,
  0, 3, i_95b29059097fca83, nullptr, nullptr, { &s_95b29059097fca83, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<65> b_9d263a3630b7ebee = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    238, 235, 183,  48,  54,  58,  38, 157,
     25,   0,   0,   0,   1,   0,   1,   0,
    161, 242, 218,  92, 136, 199, 132, 161,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  34,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 114, 112,
     99,  45, 116, 119, 111, 112,  97, 114,
    116, 121,  46,  99,  97, 112, 110, 112,
     58,  74, 111, 105, 110,  82, 101, 115,
    117, 108, 116,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,  32,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     72,   0,   0,   0,   3,   0,   1,   0,
     84,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     81,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     76,   0,   0,   0,   3,   0,   1,   0,
     88,   0,   0,   0,   2,   0,   1,   0,
    106, 111, 105, 110,  73, 100,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 117,  99,  99, 101, 101, 100, 101,
    100,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9d263a3630b7ebee = b_9d263a3630b7ebee.words;
#if !CAPNP_LITE
static const uint16_t m_9d263a3630b7ebee[] = {2, 0, 1};
static const uint16_t i_9d263a3630b7ebee[] = {0, 1, 2};
const ::capnp::_::RawSchema s_9d263a3630b7ebee = {
  0x9d263a3630b7ebee, b_9d263a3630b7ebee.words, 65, nullptr, m_9d263a3630b7ebee,
  0, 3, i_9d263a3630b7ebee, nullptr, nullptr, { &s_9d263a3630b7ebee, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace capnp {
namespace rpc {
namespace twoparty {

// VatId
#ifndef _MSC_VER
constexpr uint16_t VatId::_capnpPrivate::dataWordSize;
constexpr uint16_t VatId::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
constexpr ::capnp::Kind VatId::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* VatId::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* VatId::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// ProvisionId
#ifndef _MSC_VER
constexpr uint16_t ProvisionId::_capnpPrivate::dataWordSize;
constexpr uint16_t ProvisionId::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
constexpr ::capnp::Kind ProvisionId::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ProvisionId::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* ProvisionId::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// RecipientId
#ifndef _MSC_VER
constexpr uint16_t RecipientId::_capnpPrivate::dataWordSize;
constexpr uint16_t RecipientId::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
constexpr ::capnp::Kind RecipientId::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* RecipientId::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* RecipientId::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// ThirdPartyCapId
#ifndef _MSC_VER
constexpr uint16_t ThirdPartyCapId::_capnpPrivate::dataWordSize;
constexpr uint16_t ThirdPartyCapId::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
constexpr ::capnp::Kind ThirdPartyCapId::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ThirdPartyCapId::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* ThirdPartyCapId::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// JoinKeyPart
#ifndef _MSC_VER
constexpr uint16_t JoinKeyPart::_capnpPrivate::dataWordSize;
constexpr uint16_t JoinKeyPart::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
constexpr ::capnp::Kind JoinKeyPart::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* JoinKeyPart::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* JoinKeyPart::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// JoinResult
#ifndef _MSC_VER
constexpr uint16_t JoinResult::_capnpPrivate::dataWordSize;
constexpr uint16_t JoinResult::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
constexpr ::capnp::Kind JoinResult::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* JoinResult::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* JoinResult::_capnpPrivate::brand;
#endif  // !CAPNP_LITE


}  // namespace
}  // namespace
}  // namespace

