common --noenable_bzlmod
common --enable_platform_specific_config

build:unix --cxxopt='-std=c++20' --host_cxxopt='-std=c++20' --force_pic --verbose_failures
build:unix --cxxopt='-Wall' --host_cxxopt='-Wall'
build:unix --cxxopt='-Wextra' --host_cxxopt='-Wextra'
build:unix --cxxopt='-Wno-strict-aliasing' --host_cxxopt='-Wno-strict-aliasing'
build:unix --cxxopt='-Wno-sign-compare' --host_cxxopt='-Wno-sign-compare'
build:unix --cxxopt='-Wno-unused-parameter' --host_cxxopt='-Wno-unused-parameter'
build:unix --cxxopt='-Wno-deprecated-this-capture' --host_cxxopt='-Wno-deprecated-this-capture'

# I needed these magic spells to build locally with clang-11 and clang-12 on Ubuntu. clang-13 and up
# work out-of-the-box.
# TODO(2.0): Remove this when we support g++ again.
build:linux --action_env=CXXFLAGS=-stdlib=libc++
build:linux --action_env=LDFLAGS=-stdlib=libc++
build:linux --action_env=BAZEL_CXXOPTS=-stdlib=libc++
build:linux --action_env=BAZEL_LINKOPTS=-lc++:-lm

build:linux --config=unix
build:macos --config=unix

# See https://bazel.build/configure/windows#symlink
startup --windows_enable_symlinks
# We use LLVM's MSVC-compatible compiler driver to compile our code on Windows
# under Bazel. MSVC is natively supported when using CMake builds.
build:windows --compiler=clang-cl

build:windows --cxxopt='/std:c++20' --host_cxxopt='/std:c++20' --verbose_failures
# The `/std:c++20` argument is unused during boringssl compilation and we don't
# want a warning when compiling each file.
build:windows --cxxopt='-Wno-unused-command-line-argument' --host_cxxopt='-Wno-unused-command-line-argument'
# MSVC disappointingly sets __cplusplus to 199711L by default. Defining /Zc:__cplusplus makes it
# set the correct value.
build:windows --cxxopt='/Zc:__cplusplus' --host_cxxopt='/Zc:__cplusplus'

# build with ssl, zlib and bazel by default
build --//src/kj:openssl=True
build --//src/kj:zlib=True
build --//src/kj:brotli=True
